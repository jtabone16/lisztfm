"use strict";var ApplicationConfiguration=function(){var applicationModuleName="lisztfm",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","spotify","smart-table","angularSoundManager","sticky"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("playlists"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/signin")}]),angular.module("core").controller("HeaderController",["$scope","$location","Authentication","Menus",function($scope,$location,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.isActive=function(viewLocation){return viewLocation===$location.path()},$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$window","$location","Authentication",function($scope,$window,$location,Authentication){$window.user&&$location.path("/playlists"),$scope.authentication=Authentication}]),angular.module("core").controller("LayoutController",["$scope","$location",function($scope,$location){$scope.showHeader=function(){var header_pages=["/playlists"];return header_pages.indexOf($location.path())>=0?!0:!1}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("playlists",["spotify","smart-table","angularSoundManager","sticky"]).run(function(){}),angular.module("playlists").config(["$stateProvider",function($stateProvider){$stateProvider.state("playlists",{url:"/playlists",templateUrl:"modules/playlists/views/playlists.client.view.html"})}]),angular.module("playlists").config(["$sceDelegateProvider",function($sceDelegateProvider){$sceDelegateProvider.resourceUrlWhitelist(["self","https://embed.spotify.com/**"])}]),angular.module("playlists").controller("PlaylistsController",["$scope","$http","$state","$window","$location","Spotify",function($scope,$http,$state,$window,$location,Spotify){$scope.playlists=[],$scope.playlistsReady=!1,$scope.tracksReady=!1,$scope.currentPlaylist="",$scope.raw_playlist="",$scope.tracks=[],$scope.displayedTracks=[],$scope.tracksToDelete=[],$scope.currentUser=$window.user,$scope.currentTrack="",$scope.search_subject=$scope.search_type="track",$scope.selected_playlist=void 0,$scope.track_to_add=void 0,$scope.search_results=[],$scope.tracksToAdd=[],$scope.deleteTracks=0,$scope.addTracks=0,$scope.playlist_req={method:"GET",url:"https://api.spotify.com/v1/users/"+$window.user.username+"/playlists",headers:{Authorization:"Bearer "+$window.user.providerData.accessToken}},$scope.track_req={method:"GET",url:"https://api.spotify.com/v1/users/"+$window.user.username+"/playlists/"+$scope.currentPlaylist.id+"/tracks",headers:{Authorization:"Bearer "+$window.user.providerData.accessToken}},$scope.search_req={method:"GET",url:"https://api.spotify.com/v1/search?q=",headers:{Authorization:"Bearer "+$window.user.providerData.accessToken}},$scope.getSearchResults=function($viewValue){return $scope.search_req={method:"GET",url:"https://api.spotify.com/v1/search?q="+$viewValue.split("%20")+"&type="+$scope.search_type,headers:{Authorization:"Bearer "+$window.user.providerData.accessToken}},$http($scope.search_req).then(function(res){return $scope.search_results=res.data.tracks.items,console.log(res),$scope.search_results})},$scope.getPlaylists=function(){$http($scope.playlist_req).success(function(res){$scope.playlists.push.apply($scope.playlists,res.items),null!==res.next?($scope.playlist_req.url=res.next,$scope.getPlaylists()):$scope.playlistsReady=!0}).error(function(err){})},$http.get("/auth/refresh").success(function(resp){$window.user.providerData.accessToken=resp.token,$scope.playlist_req={method:"GET",url:"https://api.spotify.com/v1/users/"+$window.user.username+"/playlists",headers:{Authorization:"Bearer "+$window.user.providerData.accessToken}},$scope.track_req={method:"GET",url:"https://api.spotify.com/v1/users/"+$window.user.username+"/playlists/"+$scope.currentPlaylist.id+"/tracks",headers:{Authorization:"Bearer "+$window.user.providerData.accessToken}},$scope.getPlaylists()}),$scope.getTracks=function(req){$http(req).success(function(res){var trax=res.items;for(var i in trax){var artist=[],added_by="";for(var x in trax[i].track.artists)artist.push(trax[i].track.artists[x].name);null!==trax[i].added_by&&(added_by=trax[i].added_by.id);var track={playlist_id:$scope.currentPlaylist.id,added:trax[i].added_at,added_by:added_by,title:trax[i].track.name,popularity:trax[i].track.popularity,external_url:trax[i].track.external_urls.spotify,api_url:trax[i].track.href,url:trax[i].track.preview_url,uri:trax[i].track.uri,id:trax[i].track.id,explicit:trax[i].track.explicit,duration:trax[i].track.duration_ms,album:trax[i].track.album.name,artist:artist.join(),rating:1};$scope.tracks.push(track)}null!==res.next?(req.url=res.next,$scope.getTracks(req)):$scope.tracksReady=!0}).error(function(err){})},$scope.getCurrentPlaylist=function(plist){$scope.currentPlaylist.name!==plist.name&&($scope.tracks=[],$scope.tracksToDelete=[],$scope.tracksToAdd=[],$scope.track_req.url="https://api.spotify.com/v1/users/"+plist.owner.id+"/playlists/"+plist.id+"/tracks",$scope.getTracks($scope.track_req),$scope.raw_playlist=plist,$scope.currentPlaylist={id:plist.id,name:plist.name,collaborative:plist.collaborative,track_total:plist.tracks.total,images:plist.images,external_url:plist.external_urls.spotify,owner:plist.owner.id,snapshots:[]},$http.post("/user/playlist/get",$scope.currentPlaylist).success(function(resp){$scope.currentPlaylist.snapshots=resp.snapshots}).error(function(resp){var snap={id:plist.snapshot_id,created:new Date,note:"Imported playlist to liszt.fm"};$scope.currentPlaylist.snapshots.push(snap)}))},$scope.trackSelected=function(track){console.log(track),$scope.currentTrack="https://embed.spotify.com/?uri=spotify:track:"+track.id},$scope.dequeue=function(track,action){if("add"===action){for(var i in $scope.tracksToAdd)if(track.uri===$scope.tracksToAdd[i].uri){$scope.tracksToAdd.splice(i,1);break}}else if("remove"===action)for(var j in $scope.tracksToDelete)if(track.uri===$scope.tracksToDelete[j].uri){$scope.tracksToDelete.splice(j,1);break}},$scope.addTrack=function($item,$model,$label){var track_uri=$item.uri;$scope.currentTrack="https://embed.spotify.com/?uri="+track_uri;var found=!1,artist=[];for(var x in $item.artists)artist.push($item.artists[x].name);for(var i=0;i<$scope.tracksToAdd.length;i++)if($scope.tracksToAdd[i].uri===track_uri){found=!0,$scope.tracksToAdd.splice(i,1);break}if(found===!1){var trak={uri:track_uri,artist:artist.join(),title:$item.name,added:new Date,added_by:$scope.currentUser.username};$scope.tracksToAdd.push(trak)}},$scope.addTracksNow=function(){var uris=[];for(var i in $scope.tracksToAdd)uris.push($scope.tracksToAdd[i].uri);var req={method:"POST",url:"https://api.spotify.com/v1/users/"+$window.user.username+"/playlists/"+$scope.currentPlaylist.id+"/tracks",headers:{Authorization:"Bearer "+$window.user.providerData.accessToken,"Content-Type":"application/json"},data:{uris:uris}};$http(req).success(function(res){var addedTracks=[];for(var k in $scope.tracksToAdd){var str=$scope.tracksToAdd[k].title+" by "+$scope.tracksToAdd[k].artist;addedTracks.push(str)}var snap={id:res.snapshot_id,created:new Date,note:"Added "+$scope.tracksToAdd.length+" track(s) ("+addedTracks.join()+") to "+$scope.currentPlaylist.name};$scope.currentPlaylist.snapshots.push(snap),$http.post("/user/playlist/add",$scope.currentPlaylist).success(function(res){for(var x in $scope.tracksToAdd)$scope.tracks.push($scope.tracksToAdd[x]);$scope.tracksToAdd=[]}).error(function(res){console.log("Error updating playlist in database")})}).error(function(res){console.log(res)})},$scope.removeTrack=function(track){for(var found=!1,i=0;i<$scope.tracksToDelete.length;i++)if($scope.tracksToDelete[i].uri===track.uri){found=!0,$scope.tracksToDelete.splice(i,1);break}if(found===!1){var trak={uri:track.uri,artist:track.artist,title:track.title};$scope.tracksToDelete.push(trak)}},$scope.deleteTracksNow=function(){var req={method:"DELETE",url:"https://api.spotify.com/v1/users/"+$window.user.username+"/playlists/"+$scope.tracks[0].playlist_id+"/tracks",headers:{Authorization:"Bearer "+$window.user.providerData.accessToken,"Content-Type":"application/json"},data:{tracks:$scope.tracksToDelete}};$http(req).success(function(res){var deletedTracks=[];for(var k in $scope.tracksToDelete){var str=$scope.tracksToDelete[k].title+" by "+$scope.tracksToDelete[k].artist;deletedTracks.push(str)}var snap={id:res.snapshot_id,created:new Date,note:"Deleted "+$scope.tracksToDelete.length+" track(s) ("+deletedTracks.join()+") from "+$scope.currentPlaylist.name};$scope.currentPlaylist.snapshots.push(snap),$http.post("/user/playlist/add",$scope.currentPlaylist).success(function(res){for(var y in $scope.tracksToDelete)for(var x in $scope.tracks)if($scope.tracks[x].uri===$scope.tracksToDelete[y].uri){$scope.tracks.splice(x,1);break}$scope.tracksToDelete=[]}).error(function(res){console.log("Error updating playlist in database")})}).error(function(res){})},$scope.onSelect=function($item,$model,$label){$scope.getCurrentPlaylist($item)},$scope.isOwned=function(plist){return plist.owner.id===$scope.currentUser.username},$scope.follows=function(plist){return plist.owner.id!==$scope.currentUser.username}}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","$window","Authentication",function($scope,$http,$location,$window,Authentication){$scope.authentication=Authentication,""!==$window.user&&$location.path("/playlists"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/playlists")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);